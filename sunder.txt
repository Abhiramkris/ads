import matplotlib.pyplot as plt

# Define clipping window boundaries
xmin, xmax, ymin, ymax = 50, 80, 10, 40

# Define region codes
INSIDE, LEFT, RIGHT, BOTTOM, TOP = 0, 1, 2, 4, 8

# Compute region code for a point (x, y)
def compute_outcode(x, y):
    code = INSIDE
    if x < xmin: code |= LEFT
    elif x > xmax: code |= RIGHT
    if y < ymin: code |= BOTTOM
    elif y > ymax: code |= TOP
    return code

# Cohen-Sutherland line clipping algorithm
def cohen_sutherland_clip(x0, y0, x1, y1):
    outcode0 = compute_outcode(x0, y0)
    outcode1 = compute_outcode(x1, y1)
    accept = False

    while True:
        if not (outcode0 | outcode1):  # Both points inside
            accept = True
            break
        elif outcode0 & outcode1:  # Both points share an outside region
            break
        else:
            outcode_out = outcode0 if outcode0 else outcode1
            if outcode_out & TOP:  # Point above the clipping area
                x = x0 + (x1 - x0) * (ymax - y0) / (y1 - y0)
                y = ymax
            elif outcode_out & BOTTOM:  # Point below the clipping area
                x = x0 + (x1 - x0) * (ymin - y0) / (y1 - y0)
                y = ymin
            elif outcode_out & RIGHT:  # Point to the right of the clipping area
                y = y0 + (y1 - y0) * (xmax - x0) / (x1 - x0)
                x = xmax
            elif outcode_out & LEFT:  # Point to the left of the clipping area
                y = y0 + (y1 - y0) * (xmin - x0) / (x1 - x0)
                x = xmin

            if outcode_out == outcode0:
                x0, y0, outcode0 = x, y, compute_outcode(x, y)
            else:
                x1, y1, outcode1 = x, y, compute_outcode(x, y)

    if accept:
        return [(x0, y0), (x1, y1)]
    else:
        return None

# Define line segment endpoints
line = (70, 20, 90, 30)

# Perform line clipping
clipped_line = cohen_sutherland_clip(*line)

# Plot results
plt.plot([line[0], line[2]], [line[1], line[3]], 'r-', label="Original Line")
if clipped_line:
    plt.plot([clipped_line[0][0], clipped_line[1][0]], [clipped_line[0][1], clipped_line[1][1]], 'g-', label="Clipped Line")
plt.axvline(x=xmin, color='black')
plt.axvline(x=xmax, color='black')
plt.axhline(y=ymin, color='black')
plt.axhline(y=ymax, color='black')
plt.xlim(0, 100)
plt.ylim(0, 50)
plt.legend()
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.title("Cohen-Sutherland Line Clipping")
plt.show()
