import matplotlib.pyplot as plt

# Function for Bresenham's Midpoint Circle Drawing Algorithm
def draw_circle(x_center, y_center, radius, color):
    x = 0
    y = radius
    d = 1 - radius  # Decision parameter

    # Lists to store the points for plotting
    x_points = []
    y_points = []

    # Helper function to add the eight symmetrical points of the circle
    def plot_circle_points(x_center, y_center, x, y):
        x_points.extend([x_center + x, x_center - x, x_center + x, x_center - x,
                         x_center + y, x_center - y, x_center + y, x_center - y])
        y_points.extend([y_center + y, y_center + y, y_center - y, y_center - y,
                         y_center + x, y_center + x, y_center - x, y_center - x])

    # Plot initial points
    plot_circle_points(x_center, y_center, x, y)

    # Bresenham's midpoint algorithm loop
    while x < y:
        x += 1
        if d < 0:
            d = d + 2 * x + 1
        else:
            y -= 1
            d = d + 2 * (x - y) + 1
        plot_circle_points(x_center, y_center, x, y)

    # Plot the calculated points
    plt.scatter(x_points, y_points, color=color, s=1)  # s is the size of the points

# Set up the plot area
plt.figure(figsize=(5, 10))
plt.axis('equal')
plt.axis('off')  # Turn off the axes

# Draw the red, yellow, and green circles
radius = 30  # Radius of each light circle
vertical_spacing = 100  # Distance between each circle
x_center = 0  # Horizontal center of the traffic light

# Draw each light with its color and position
draw_circle(x_center, vertical_spacing * 2, radius, 'red')     # Red light at the top
draw_circle(x_center, vertical_spacing, radius, 'yellow')      # Yellow light in the middle
draw_circle(x_center, 0, radius, 'green')                      # Green light at the bottom

# Display the plot
plt.show()
