import numpy as np
import matplotlib.pyplot as plt

# DDA Line Drawing Algorithm
def dda(x1, y1, x2, y2):
    # Calculate the differences
    dx = x2 - x1
    dy = y2 - y1
    
    # Determine the number of steps to take (convert to integer)
    steps = int(max(abs(dx), abs(dy)))  # Explicitly cast to integer
    
    # Calculate the increments
    x_inc = dx / steps
    y_inc = dy / steps
    
    # List to hold points
    points = []
    
    # Generate the points
    x, y = x1, y1
    for _ in range(steps):
        points.append((round(x), round(y)))
        x += x_inc
        y += y_inc
    
    return points

# Function to draw a simple 5-pointed star
def draw_simple_star(center, size):
    # Calculate the 5 points of the star
    points = []
    for i in range(5):
        angle = np.pi / 2.5 * i  # 72 degrees between each point
        x = center[0] + size * np.cos(angle)
        y = center[1] + size * np.sin(angle)
        points.append((x, y))
    
    # Draw lines connecting the points of the star
    for i in range(5):
        x1, y1 = points[i]
        x2, y2 = points[(i + 2) % 5]  # Connect each point to the second next point
        line_points = dda(x1, y1, x2, y2)
        for point in line_points:
            plt.plot(point[0], point[1], 'ro', markersize=1)

# Define the center and size of the star
center = (250, 250)  # Center of the canvas
size = 100  # Size of the star

# Plot the star
plt.figure(figsize=(6,6))
draw_simple_star(center, size)
plt.xlim(0, 500)
plt.ylim(0, 500)
plt.gca().set_aspect('equal', adjustable='box')
plt.title("Simple 5-Pointed Star Using DDA Algorithm")
plt.show()
